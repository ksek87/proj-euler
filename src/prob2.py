"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with $1$ and $2$,
the first $10$ terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms
"""


# logic: compute the fibonacci sequence up to 4 million -- then make a subset of the even numbers to sum

# classic recursive fibonacci (too slow for how large n is in this case)
def fibonacci(n):
    if n in {0, 1}:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)


def fib(n):
    lst = []
    i = 0
    x = 0
    y = 1
    z = 0

    while i <= n:
        lst.append(x)
        z = x + y
        x = y
        y = z
        i += 1

    return lst


def even_list(lis):
    evens = []
    for i in lis:
        if i % 2 == 0:
            evens.append(i)

    return evens


# bound is 4 million
computed_to_bound = fib(4000000)  # [fibonacci(n) for n in range(4000000)]
even_vals = even_list(computed_to_bound)
print("final answer:", sum(even_vals))
